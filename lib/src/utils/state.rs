use anyhow::{anyhow, bail, Error};
use revm::{
    primitives::{
        Address, Bytecode, Bytes, CreateScheme, ExecutionResult, HashMap, Output, TransactTo,
        TxEnv, U256,
    },
    InMemoryDB, EVM,
};

/// Returns the deployed code and storage of a contract.
///
/// `code` is the contract bytecode (not deployed bytecode) with constructor data, use [ethers_core::abi::parse_abi] or some abi parser to encode constructor bytecode data into final bytes.
pub fn get_initial_code_and_storage(
    sender: Address,
    code: Bytes,
    value: U256,
) -> Result<(Bytecode, HashMap<U256, U256>), Error> {
    let db = InMemoryDB::default();
    let mut evm = EVM::new();
    evm.database(db);

    evm.env.tx = TxEnv {
        caller: sender,
        transact_to: TransactTo::Create(CreateScheme::Create),
        value,
        data: code,
        ..Default::default()
    };

    let result = evm.transact_commit()?;
    if let ExecutionResult::Success {
        output: Output::Create(_, Some(address)),
        ..
    } = result
    {
        let state = &evm
            .db
            .as_mut()
            .expect("Should contains db")
            .load_account(address)?;
        let deployed_code = state.info.code.clone().ok_or(anyhow!("No code"))?;
        let storage = state.storage.clone();

        Ok((deployed_code, storage))
    } else {
        bail!("Contract creation failed: {:#?}", result)
    }
}

#[cfg(test)]
mod tests {
    use std::str::FromStr;

    use ethers_core::abi::{parse_abi_str, Token};
    use revm::primitives::{hex::FromHex, Address, Bytes, HashMap, U256};

    use super::get_initial_code_and_storage;

    #[test]
    fn correct_get_initial_code_and_storage() {
        let bytecode = Bytes::from_hex("60a06040523480156200001157600080fd5b5060405162000a0b38038062000a0b833981810160405281019062000037919062000283565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600190816200007c91906200051f565b5060016000806101000a81548160ff02191690831515021790555080620000a39062000642565b60001c600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050620006b2565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000159826200010e565b810181811067ffffffffffffffff821117156200017b576200017a6200011f565b5b80604052505050565b600062000190620000f0565b90506200019e82826200014e565b919050565b600067ffffffffffffffff821115620001c157620001c06200011f565b5b620001cc826200010e565b9050602081019050919050565b60005b83811015620001f9578082015181840152602081019050620001dc565b60008484015250505050565b60006200021c6200021684620001a3565b62000184565b9050828152602081018484840111156200023b576200023a62000109565b5b62000248848285620001d9565b509392505050565b600082601f83011262000268576200026762000104565b5b81516200027a84826020860162000205565b91505092915050565b6000602082840312156200029c576200029b620000fa565b5b600082015167ffffffffffffffff811115620002bd57620002bc620000ff565b5b620002cb8482850162000250565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200032757607f821691505b6020821081036200033d576200033c620002df565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003a77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000368565b620003b3868362000368565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000400620003fa620003f484620003cb565b620003d5565b620003cb565b9050919050565b6000819050919050565b6200041c83620003df565b620004346200042b8262000407565b84845462000375565b825550505050565b600090565b6200044b6200043c565b6200045881848462000411565b505050565b5b8181101562000480576200047460008262000441565b6001810190506200045e565b5050565b601f821115620004cf57620004998162000343565b620004a48462000358565b81016020851015620004b4578190505b620004cc620004c38562000358565b8301826200045d565b50505b505050565b600082821c905092915050565b6000620004f460001984600802620004d4565b1980831691505092915050565b60006200050f8383620004e1565b9150826002028217905092915050565b6200052a82620002d4565b67ffffffffffffffff8111156200054657620005456200011f565b5b6200055282546200030e565b6200055f82828562000484565b600060209050601f83116001811462000597576000841562000582578287015190505b6200058e858262000501565b865550620005fe565b601f198416620005a78662000343565b60005b82811015620005d157848901518255600182019150602085019450602081019050620005aa565b86831015620005f15784890151620005ed601f891682620004e1565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b6000819050602082019050919050565b6000819050919050565b600062000639825162000621565b80915050919050565b60006200064f8262000606565b826200065b8462000611565b905062000668816200062b565b92506020821015620006ab57620006a67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080262000368565b831692505b5050919050565b60805161033d620006ce6000396000610130015261033d6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306fdde03146100465780638da5cb5b146100645780638f1a01f114610082575b600080fd5b61004e6100a0565b60405161005b91906101f3565b60405180910390f35b61006c61012e565b6040516100799190610256565b60405180910390f35b61008a610152565b604051610097919061028c565b60405180910390f35b600180546100ad906102d6565b80601f01602080910402602001604051908101604052809291908181526020018280546100d9906102d6565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b600081519050919050565b600082825260208201905092915050565b60005b8381101561019d578082015181840152602081019050610182565b60008484015250505050565b6000601f19601f8301169050919050565b60006101c582610163565b6101cf818561016e565b93506101df81856020860161017f565b6101e8816101a9565b840191505092915050565b6000602082019050818103600083015261020d81846101ba565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061024082610215565b9050919050565b61025081610235565b82525050565b600060208201905061026b6000830184610247565b92915050565b60008115159050919050565b61028681610271565b82525050565b60006020820190506102a1600083018461027d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806102ee57607f821691505b602082108103610301576103006102a7565b5b5091905056fea26469706673582212209ed1fa09e5fdb46790b3c9abd2ce7968dd5074958298733364e214bbd178696e64736f6c63430008120033").unwrap();
        let constructor = parse_abi_str("constructor(string)")
            .unwrap()
            .constructor
            .unwrap();
        let code = constructor
            .encode_input(
                bytecode.to_vec(),
                &[Token::String(String::from("asdfodsfoFkkeo"))],
            )
            .unwrap();

        let (deployed_code, storage) = get_initial_code_and_storage(
            Address::from_hex("0x5B38Da6a701c568545dCfcB03FcB875f56beddC4").unwrap(),
            Bytes::from(code),
            U256::ZERO,
        )
        .unwrap();
        let correct_bytecode = Bytes::from_hex("0x608060405234801561001057600080fd5b50600436106100415760003560e01c806306fdde03146100465780638da5cb5b146100645780638f1a01f114610082575b600080fd5b61004e6100a0565b60405161005b91906101f3565b60405180910390f35b61006c61012e565b6040516100799190610256565b60405180910390f35b61008a610152565b604051610097919061028c565b60405180910390f35b600180546100ad906102d6565b80601f01602080910402602001604051908101604052809291908181526020018280546100d9906102d6565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b505050505081565b7f0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc481565b60008054906101000a900460ff1681565b600081519050919050565b600082825260208201905092915050565b60005b8381101561019d578082015181840152602081019050610182565b60008484015250505050565b6000601f19601f8301169050919050565b60006101c582610163565b6101cf818561016e565b93506101df81856020860161017f565b6101e8816101a9565b840191505092915050565b6000602082019050818103600083015261020d81846101ba565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061024082610215565b9050919050565b61025081610235565b82525050565b600060208201905061026b6000830184610247565b92915050565b60008115159050919050565b61028681610271565b82525050565b60006020820190506102a1600083018461027d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806102ee57607f821691505b602082108103610301576103006102a7565b5b5091905056fea26469706673582212209ed1fa09e5fdb46790b3c9abd2ce7968dd5074958298733364e214bbd178696e64736f6c63430008120033000000000000000000000000000000000000000000000000000000000000000000").unwrap();
        assert_eq!(
            deployed_code.bytecode, correct_bytecode,
            "Incorrect deployed bytecode"
        );
        let correct_storage = HashMap::from_iter([
            (U256::from(0), U256::from(1)),
            (
                U256::from(1),
                U256::from_str(
                    "0x617364666f6473666f466b6b656f00000000000000000000000000000000001c",
                )
                .unwrap(),
            ),
            (
                U256::from_str(
                    "0xb314f101a00aa0d8cc6704cc6dd1e9dd7551ec98c9df52079c192c560ba66c4a",
                )
                .unwrap(),
                U256::from_str(
                    "0x617364666f6473666f466b6b656f000000000000000000000000000000000000",
                )
                .unwrap(),
            ),
        ]);
        assert_eq!(storage, correct_storage, "Incorrect storage");
    }
}
